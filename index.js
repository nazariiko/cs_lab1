import { firstText, secondText, thirdText } from './texts.js'
import { countSymbolsInString } from './helpers.js'

const alphabet = [
  'а', 'б', 'в', 'г', 'ґ', 'д', 'е', 'є', 'ж', 'з', 'и', 'і', 'ї',
  'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т',
  'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ь', 'ю', 'я',
]

let regex = /[.,-:?'";!()—–”“’\s]/g

let clearedFirstText = firstText.replace(regex, '')
let clearedSecondText = secondText.replace(regex, '')
let clearedThirdText = thirdText.replace(regex, '')

const firstTextCount = countSymbolsInString(clearedFirstText.toLocaleLowerCase())
const secondTextCount = countSymbolsInString(clearedSecondText.toLocaleLowerCase())
const thirdTextCount = countSymbolsInString(clearedThirdText.toLocaleLowerCase())

alphabet.forEach(symbol => {
  let count = firstTextCount[symbol] || 0
  console.log(`${symbol} : ${count / clearedFirstText.length * 100} %`);
})

alphabet.forEach(symbol => {
  let count = secondTextCount[symbol] || 0
  console.log(`${symbol} : ${count / clearedSecondText.length * 100} %`);
})

alphabet.forEach(symbol => {
  let count = thirdTextCount[symbol] || 0
  console.log(`${symbol} : ${count / clearedThirdText.length * 100} %`);
})

let entrophy1 = 0
alphabet.forEach(symbol => {
  let count = firstTextCount[symbol] || 0
  let p = count / clearedFirstText.length
  if (!p) return
  entrophy1 += p * Math.log2(p)
})
console.log('Cередня ентропія алфавіту', -entrophy1);
console.log('Кількість інформації', -entrophy1 * clearedFirstText.length);

let entrophy2 = 0
alphabet.forEach(symbol => {
  let count = secondTextCount[symbol] || 0
  let p = count / clearedSecondText.length
  if (!p) return
  entrophy2 += p * Math.log2(p)
})
console.log('Cередня ентропія алфавіту', -entrophy2);
console.log('Кількість інформації', -entrophy2 * clearedFirstText.length);

let entrophy3 = 0
alphabet.forEach(symbol => {
  let count = thirdTextCount[symbol] || 0
  let p = count / clearedSecondText.length
  if (!p) return
  entrophy3 += p * Math.log2(p)
})
console.log('Cередня ентропія алфавіту', -entrophy3);
console.log('Кількість інформації', -entrophy3 * clearedThirdText.length);

let encoded1 = Buffer.from(clearedFirstText).toString('base64')
const encoded1Count = countSymbolsInString(encoded1.toLocaleLowerCase())

let entrophyEncoded1 = 0
for (let key in encoded1Count) {
  let count = encoded1Count[key]
  let p = count / encoded1.length
  entrophyEncoded1 += p * Math.log2(p)
}

console.log(-entrophyEncoded1 * encoded1.length);

let encoded2 = Buffer.from(clearedSecondText).toString('base64')
const encoded2Count = countSymbolsInString(encoded2.toLocaleLowerCase())

let entrophyEncoded2 = 0
for (let key in encoded2Count) {
  let count = encoded2Count[key]
  let p = count / encoded2.length
  entrophyEncoded2 += p * Math.log2(p)
}

console.log(-entrophyEncoded2 * encoded2.length);

let encoded3 = Buffer.from(clearedThirdText).toString('base64')
const encoded3Count = countSymbolsInString(encoded3.toLocaleLowerCase())

let entrophyEncoded3 = 0
for (let key in encoded3Count) {
  let count = encoded3Count[key]
  let p = count / encoded3.length
  entrophyEncoded3 += p * Math.log2(p)
}

console.log(-entrophyEncoded3 * encoded3.length);

let base64gzip2 = ``

let encodedzip = Buffer.from(base64gzip2).toString('base64')
const encodedZipCount = countSymbolsInString(encodedzip.toLocaleLowerCase())

let entrophyEncodedZip = 0
for (let key in encodedZipCount) {
  let count = encodedZipCount[key]
  let p = count / encodedzip.length
  entrophyEncodedZip += p * Math.log2(p)
}

console.log(-entrophyEncodedZip * encodedzip.length);